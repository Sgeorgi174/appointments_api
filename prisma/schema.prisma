// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int               @id @default(autoincrement())
  firstName    String
  email        String            @unique
  password     String
  botSettings  UserBotSettings[]
  appointments Appointment[]
  services     Service[]
  dates        Date[]
  clients      Client[]
  bot          Bots[]
  contactInfo  ContactInfo[]
  categories   Category[]
}

model ContactInfo {
  id        Int     @id @default(autoincrement())
  address   String?
  telNumber String?
  instagram String?
  vk        String?
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     

  @@unique([userId])
}

model UserBotSettings {
  id                  Int     @id @default(autoincrement())
  botToken            String?
  telegramId          Int?
  greetingText        String?
  greetingFileUrl     String?
  notificationText    String?
  notificationFileUrl String?
  port                Int
  user                User    @relation(fields: [userId], references: [id])
  userId              Int

  @@unique([userId])
}

model Bots {
  id       Int     @id @default(autoincrement())
  exec     String
  isActive Boolean @default(false)
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
}

model Client {
  id           Int           @id @default(autoincrement())
  telegramId   Int?
  name         String
  telNumber    String
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int // Клиент может иметь множество записей на прием
}

model Appointment {
  id        Int     @id @default(autoincrement())
  day       String
  startTime Int
  client    Client  @relation(fields: [clientId], references: [id]) // Связь с клиентом по ID
  clientId  Int // ID клиента
  service   Service @relation(fields: [serviceId], references: [id]) // Связь с услугой по ID
  serviceId Int // ID услуги
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  status    String
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  services Service[]
  user     User      @relation(fields: [userId], references: [id])
  userId   Int
}

model Service {
  id           Int           @id @default(autoincrement())
  name         String
  cost         Int
  duration     Int // Длительность услуги в минутах
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  category     Category      @relation(fields: [categoryId], references: [id])
  categoryId   Int
}

// Определение модели доступности часов
model Date {
  id        Int    @id @default(autoincrement())
  date      String
  startTime Int
  endTime   Int
  startRest Int?
  endRest   Int?
  User      User   @relation(fields: [userId], references: [id])
  userId    Int

  @@unique([date, userId])
}
