const { prisma } = require("../prisma/prisma_client");
const TelegramBot = require("node-telegram-bot-api");
const { getServiceById } = require("../utils/getServiceById");
const { getClientById } = require("../utils/getClientById");
const { getBotSettingByUserId } = require("../utils/getBotSettingByUserId");
const { getAppointmentById } = require("../utils/getAppointmentById");
const { sendNotification } = require("../utils/sendNotifation");

//there are 3 type of status : 'pending' || 'confirmed' || 'passed'

const addAppointment = async (req, res) => {
  try {
    const { serviceId, clientId, date, time, userId } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (
      ![serviceId, clientId, date, time, userId].every(
        (param) => param !== undefined
      )
    ) {
      throw new Error("–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏
    const service = await getServiceById(serviceId);
    const { duration } = service;

    // –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    const availability = await prisma.hourAvailability.findFirst({
      where: { date, userId: parseInt(userId) },
      include: { hours: true },
    });

    if (!availability) {
      throw new Error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É");
    }

    for (let i = 0; i < duration; i++) {
      const currentHour = availability.hours.find((h) => {
        return h.hour === parseInt(time) + i;
      });

      if (currentHour || currentHour.isAvailable) {
        await prisma.hour.update({
          where: { id: currentHour.id },
          data: { isAvailable: false },
        });
      } else {
        throw new Error("–í—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ");
      }
    }

    //–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    const appointment = await prisma.appointment.create({
      data: {
        day: date,
        hour: parseInt(time),
        clientId: parseInt(clientId),
        serviceId: parseInt(serviceId),
        userId: parseInt(userId),
        status: "pending",
      },
    });

    if (appointment) {
      const client = await getClientById(clientId);
      const botSetting = await getBotSettingByUserId(userId);
      const botToken = botSetting.botToken;

      if (botToken) {
        const bot = new TelegramBot(botToken, { polling: false });

        if (client.telegramId) {
          await bot.sendMessage(
            client.telegramId,
            `–ü—Ä–∏–≤–µ—Ç, ${client.name}! üëã
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞. 
–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —ç—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.`
          );
        }

        await bot.sendMessage(
          botSetting.telegramId,
          `‚ö†Ô∏è *–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å!* ‚ö†Ô∏è
          
üìÜ *${appointment.day.split("-")[2]}.${appointment.day.split("-")[1]} - ${
            appointment.hour
          }:00*
üßë ${client.name}
‚òéÔ∏è ${client.telNumber}
üíº ${service.name}

*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ*
`,
          {
            parse_mode: "Markdown",
          }
        );
        bot.sendSticker(
          botSetting.telegramId,
          "CAACAgIAAxkBAAEEzVBmILAmhnUU7iJV4Qj-_efzQVA-qwACAQEAAvcCyA--Bt0rrVjiJDQE"
        );
      }
    }

    return res.status(201).json(appointment);
  } catch (error) {
    console.error("Error adding appointment:", error);
    return res
      .status(500)
      .json({ message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏" });
  }
};

const deleteAppointment = async (req, res) => {
  try {
    const { id } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!id) {
      throw new Error("–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏
    const appointment = await getAppointmentById({ id });
    const { day, hour, service } = appointment;
    const { duration } = service;

    // –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    const availability = await prisma.hourAvailability.findFirst({
      where: { date: day, userId: appointment.userId },
      include: { hours: true },
    });

    if (!availability) {
      throw new Error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É");
    }

    for (let i = 0; i < duration; i++) {
      const currentHour = availability.hours.find((h) => {
        return h.hour === hour + i;
      });

      if (currentHour) {
        await prisma.hour.update({
          where: { id: currentHour.id },
          data: { isAvailable: true },
        });
      }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    await prisma.appointment.delete({
      where: { id: parseInt(appointment.id) },
    });

    return res.status(200).json({ message: "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞" });
  } catch (error) {
    console.error("Error deleting appointment:", error);
    return res
      .status(500)
      .json({ message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏" });
  }
};

const confirmAppointment = async (req, res) => {
  const { id } = req.body;

  if (!id) {
    throw new Error("–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
  }

  try {
    const appointment = await getAppointmentById({ id });

    if (!appointment) {
      return res.status(404).json({ error: "Appointment not found" });
    }

    const updatedAppointment = await prisma.appointment.update({
      where: { id: parseInt(appointment.id) },
      include: { client: true, service: true },
      data: { status: "confirmed" },
    });

    if (updatedAppointment.client.telegramId) {
      const botSetting = await getBotSettingByUserId(updatedAppointment.userId);
      const client = updatedAppointment.client;
      const bot = new TelegramBot(botSetting.botToken, { polling: false });

      await bot.sendMessage(client.telegramId, "üéâ");
      await bot.sendMessage(
        client.telegramId,
        `‚úÖ*–í–∞—à –º–∞—Å—Ç–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø–∏—Å—å!*‚úÖ

*${client.name}*, –∂–¥—É –≤–∞—Å üìÜ *${updatedAppointment.day.split("-")[2]}.${
          updatedAppointment.day.split("-")[1]
        }* –≤ *${updatedAppointment.hour}:00*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ.
–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –¥–∞–π—Ç–µ –º–Ω–µ –∑–Ω–∞—Ç—å.`,
        {
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [{ text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é ‚Ü©Ô∏è", callback_data: "back" }],
            ],
          },
        }
      );

      sendNotification({ updatedAppointment, bot, client, botSetting });
    }

    return res.status(200).json(updatedAppointment);
  } catch (error) {
    console.error(error);
    return res
      .status(500)
      .json({ error: "An error occurred while confirming the appointment" });
  }
};

const getAllAppointments = async (req, res) => {
  try {
    const userId = req.user.id;

    const appointments = await prisma.appointment.findMany({
      where: { userId: userId, status: { not: "passed" } },
      include: { client: true, service: true },
    });

    if (!appointments) {
      throw new Error("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π");
    }

    return res.status(200).json(appointments);
  } catch (error) {
    console.error("Error getting appointment:", error);
    return res
      .status(500)
      .json({ message: error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π" });
  }
};

module.exports = {
  addAppointment,
  deleteAppointment,
  getAllAppointments,
  confirmAppointment,
};
